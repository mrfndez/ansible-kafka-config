---
#########################################################
###                ZOOKEEPER CONFIGS                  ###
#########################################################
- name: Ensure ZooKeeper config directory exists
  file:
    path: "{{ kafka_dir }}/config"
    state: directory
    mode: '0755'

- name: Ensure ZooKeeper data directory exists
  file:
    path: "{{ zk_data_dir }}"
    state: directory
    mode: '0755'

- name: Set ZooKeeper ID (myid) by matching IP to zookeeper group
  set_fact:
    zk_id: >-
      {{
        (groups['zookeepers']
          | map('extract', hostvars, ['ansible_host'])
          | list)
          .index(ansible_host) + 1
      }}
  when: ansible_host in (groups['zookeepers'] | map('extract', hostvars, ['ansible_host']) | list)

- name: Write ZooKeeper myid
  copy:
    content: "{{ zk_id }}"
    dest: "{{ zk_data_dir }}/myid"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: '0644'


#########################################################
###              ZOOKEEPER AS A SERVICE               ###
#########################################################
- name: Create Zookeeper data and log directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: '0755'
    recurse: yes
  loop:
    - "{{ zk_data_dir }}"
    - "{{ zk_log_dir }}"

- name: Create systemd service for Zookeeper
  copy:
    dest: /etc/systemd/system/zookeeper.service
    content: |
      [Unit]
      Description=Apache Zookeeper server
      After=network.target

      [Service]
      Type=simple
      User={{ kafka_user }}
      ExecStart={{ kafka_dir }}/bin/zookeeper-server-start.sh {{ kafka_dir }}/config/zookeeper.properties
      ExecStop={{ kafka_dir }}/bin/zookeeper-server-stop.sh
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
  notify: Reload systemd

- name: Enable and start Zookeeper
  systemd:
    name: zookeeper
    enabled: yes
    state: started


#########################################################
###              CHECK ZOOKEEPER HEALTH               ###
#########################################################
- name: Wait for Zookeeper to be up
  wait_for:
    port: "{{ zk_port }}"
    state: started
    delay: 2
    timeout: 60

- name: Health check - Zookeeper "ruok" 4lw
  shell: echo "ruok" | nc localhost "{{ zk_port }}"
  register: ruok_out
  failed_when: "'imok' not in ruok_out.stdout"
  changed_when: false

#########################################################
###           STEP #1 - INSTALL DEPENDENCIES          ###
#########################################################
- name: Update apt cache
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian"
  
- name: Ensure required OS packages are installed
  apt:
    name:
      - wget
      - ca-certificates
      - zip
      - net-tools
      - vim
      - nano
      - tar
      - netcat-traditional
      - openjdk-21-jdk
    state: present
  when: ansible_os_family == "Debian"

- name: Disable swap (set vm.swappiness=1)
  sysctl:
    name: vm.swappiness
    value: '1'
    state: present
    sysctl_set: yes
    reload: yes

- name: Persist swappiness setting in /etc/sysctl.conf
  lineinfile:
    path: /etc/sysctl.conf
    line: 'vm.swappiness=1'
    state: present


#########################################################
###            STEP #2 - DOWNLOAD BINARIES            ###
#########################################################
# - name: Download Kafka {{ kafka_version }} from Apache
#   get_url:
#     url: "{{ kafka_url }}"
#     dest: "/tmp/{{ kafka_archive }}"
#     mode: '0644'
#     force: no

# - name: Extract Kafka binaries to /opt/
#   unarchive:
#     src: "/tmp/{{ kafka_archive }}"
#     dest: "/opt/"
#     remote_src: yes
#     creates: "/opt/kafka_{{ scala_version }}-{{ kafka_version }}"

# - name: Rename extracted Kafka folder to {{ kafka_dir }}
#   command: mv /opt/kafka_{{ scala_version }}-{{ kafka_version }} {{ kafka_dir }}
#   args:
#     creates: "{{ kafka_dir }}"

# - name: Remove Kafka archive after extraction
#   file:
#     path: "/tmp/{{ kafka_archive }}"
#     state: absent


#########################################################
###             STEP #3 - CONFIGURE HOSTS             ###
#########################################################
- name: Generate host/ip pairs from inventory to /etc/hosts
  set_fact:
    all_hosts_block: |
      {% for host in groups['all'] %}
      {{ hostvars[host].ansible_host }} {{ host }}
      {% endfor %}

- name: Inject Kafka host entries into /etc/hosts
  blockinfile:
    path: /etc/hosts
    block: "{{ all_hosts_block }}"
    marker: "# {mark} ANSIBLE MANAGED KAFKA HOSTS"


#########################################################
###            STEP #4 - ZOOKEEPER CONFIGS            ###
#########################################################
- name: Ensure ZooKeeper config directory exists
  file:
    path: "{{ kafka_dir }}/config"
    state: directory
    mode: '0755'

- name: Ensure ZooKeeper data directory exists
  file:
    path: "{{ zk_data_dir }}"
    state: directory
    mode: '0755'

- name: Set ZooKeeper ID (myid) by matching IP to zookeeper group
  set_fact:
    zk_id: >-
      {{
        (groups['zookeepers']
          | map('extract', hostvars, ['ansible_host'])
          | list)
          .index(ansible_host) + 1
      }}
  when: ansible_host in (groups['zookeepers'] | map('extract', hostvars, ['ansible_host']) | list)

- name: Write ZooKeeper myid
  copy:
    content: "{{ zk_id }}"
    dest: "{{ zk_data_dir }}/myid"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: '0644'

- name: Deploy zookeeper.properties
  template:
    src: ../templates/zookeeper.properties.j2
    dest: "{{ kafka_dir }}/config/zookeeper.properties"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: '0644'
    backup: yes


#########################################################
###           STEP #5 - ZOOKEEPER AS SERVICE          ###
#########################################################
- name: Create Zookeeper data and log directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: '0755'
    recurse: yes
  loop:
    - "{{ zk_data_dir }}"
    - "{{ zk_log_dir }}"
    - "{{ jvm_log_dir }}"

- name: Create systemd service for Zookeeper
  copy:
    dest: /etc/systemd/system/zookeeper.service
    content: |
      [Unit]
      Description=Apache Zookeeper server
      After=network.target

      [Service]
      Type=simple
      User={{ kafka_user }}
      ExecStart={{ kafka_dir }}/bin/zookeeper-server-start.sh {{ kafka_dir }}/config/zookeeper.properties
      ExecStop={{ kafka_dir }}/bin/zookeeper-server-stop.sh
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
  notify: Reload systemd

- name: Enable and start Zookeeper
  systemd:
    name: zookeeper
    enabled: yes
    state: started


#########################################################
###             STEP #6 - ZOOKEEPER HEALTH            ###
#########################################################
- name: Wait for Zookeeper to be up
  wait_for:
    port: "{{ zk_port }}"
    state: started
    delay: 2
    timeout: 30

- name: Health check - Zookeeper "ruok" 4lw
  shell: echo "ruok" | nc localhost "{{ zk_port }}"
  register: ruok_out
  failed_when: "'imok' not in ruok_out.stdout"
  changed_when: false
